---
swagger: "2.0"
info:
  description: "This is a simple API to manage the exchange of information required\
    \ to set up multi-party asset swap transactions between nodes of a Chain Core\
    \ network."
  version: "0.0.1"
  title: "BlockEx API"
  contact:
    email: "garyd@bankservafrica.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/BlockEx/0.0.1"
tags:
- name: "AppIO"
  description: "The AppIO controller defines paths that deal with the logic of the\
    \ app\n\n* **trades**: management of view, placing and accepting trades in the\
    \ system.\n* **users**: manage app user info.\n"
- name: "ChainIO"
  description: "The ChainIO controller handles operations to the Chain Core nodes\
    \ using the Chain-SDK\n\nThe users local app stores and provides the connection\
    \ information as required.\n\n* **accounts**    : list accounts\n* **account**\
    \     : create account\n* **assets**      : list assets\n* **keys**        : list\
    \ keys\n* **key**         : create key\n* **transactions**: list transactions\n\
    * **sign**        : submit transactions\n"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /app/trades:
    get:
      tags:
      - "AppIO"
      description: "List Trades posted in the system"
      operationId: "getTrades"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "bad input parameter"
          schema:
            $ref: "#/definitions/inline_response_400"
      x-swagger-router-controller: "AppIO"
    post:
      tags:
      - "AppIO"
      description: "Adds a new Trade Offer Item to the system"
      operationId: "postTrade"
      parameters:
      - in: "body"
        name: "offerItem"
        description: "Offer item to add to the system"
        required: false
        schema:
          $ref: "#/definitions/TradeItem"
      responses:
        201:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "invalid input, object invalid"
          schema:
            $ref: "#/definitions/inline_response_400"
        409:
          description: "an existing item already exists"
          schema:
            $ref: "#/definitions/inline_response_400"
      x-swagger-router-controller: "AppIO"
    put:
      tags:
      - "AppIO"
      description: "Updates an Offer Item"
      operationId: "updateTrade"
      parameters:
      - in: "body"
        name: "offerItem"
        description: "Offer to be updated"
        required: false
        schema:
          $ref: "#/definitions/TradeItem"
      responses:
        201:
          description: "item updated"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "invalid input, object invalid"
          schema:
            $ref: "#/definitions/inline_response_400"
        409:
          description: "an existing item already exists"
          schema:
            $ref: "#/definitions/inline_response_400"
      x-swagger-router-controller: "AppIO"
  /app/trades/{tradeId}:
    get:
      tags:
      - "AppIO"
      description: "Gets specified trade details"
      operationId: "getTrade"
      parameters:
      - name: "tradeId"
        in: "path"
        description: "Id of trade to work with"
        required: true
        type: "integer"
        format: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "bad input parameter"
          schema:
            $ref: "#/definitions/inline_response_400"
      x-swagger-router-controller: "AppIO"
    delete:
      tags:
      - "AppIO"
      description: "Delete the specified trade from the system unless it has been\
        \ completed"
      operationId: "deleteTrade"
      parameters:
      - name: "tradeId"
        in: "path"
        description: "Id of trade to work with"
        required: true
        type: "integer"
        format: "integer"
      responses:
        200:
          description: "item deleted confirmation"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "invalid input, object invalid"
          schema:
            $ref: "#/definitions/inline_response_400"
      x-swagger-router-controller: "AppIO"
  /app/users:
    get:
      tags:
      - "AppIO"
      description: "List users registered to use the app."
      operationId: "getUsers"
      parameters: []
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "AppIO"
    post:
      tags:
      - "AppIO"
      description: "Register a new User to the system"
      operationId: "postUser"
      parameters:
      - in: "body"
        name: "user"
        description: "Offer item to add to the system"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "item created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
      x-swagger-router-controller: "AppIO"
  /app/users/{userName}:
    get:
      tags:
      - "AppIO"
      description: "Gets the specified user details"
      operationId: "getUser"
      parameters:
      - name: "userName"
        in: "path"
        description: "Id of user to work with"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        400:
          description: "invalid input, object invalid"
          schema:
            $ref: "#/definitions/inline_response_400"
      x-swagger-router-controller: "AppIO"
    delete:
      tags:
      - "AppIO"
      description: "Delete the specified user from the system unless they have completed/pending\
        \ transactions"
      operationId: "deleteUser"
      parameters:
      - name: "userName"
        in: "path"
        description: "Id of user to work with"
        required: true
        type: "string"
      responses:
        200:
          description: "item deleted confirmation"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "invalid input, object invalid"
          schema:
            $ref: "#/definitions/inline_response_400"
      x-swagger-router-controller: "AppIO"
  /chain/accounts:
    post:
      tags:
      - "ChainIO"
      description: "Gets list of local accounts. If Account properties provided, will\
        \ attempt search"
      operationId: "getAccounts"
      parameters:
      - in: "body"
        name: "request"
        description: "ChainRequest object with Connection and optional Account properties\
          \ specified."
        required: false
        schema:
          $ref: "#/definitions/ChainRequest"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Account"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "ChainIO"
    put:
      tags:
      - "ChainIO"
      description: "Create new account on local node."
      operationId: "createAccount"
      parameters:
      - in: "body"
        name: "request"
        description: "ChainRequest object with Connection and Account properties specified."
        required: false
        schema:
          $ref: "#/definitions/ChainRequest"
      responses:
        200:
          description: "new account created, return account details"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Account"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "ChainIO"
  /chain/assets:
    post:
      tags:
      - "ChainIO"
      description: "Gets list of local assets. If Asset properties provided, will\
        \ attempt search"
      operationId: "getAssets"
      parameters:
      - in: "body"
        name: "request"
        description: "ChainRequest object with Connection and optional Asset properties\
          \ specified."
        required: false
        schema:
          $ref: "#/definitions/ChainRequest"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Asset"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "ChainIO"
  /chain/keys:
    post:
      tags:
      - "ChainIO"
      description: "Gets list of local HSM keys."
      operationId: "getKeys"
      parameters:
      - in: "body"
        name: "request"
        description: "ChainRequest object with Connection and optional HSMKey properties\
          \ specified."
        required: false
        schema:
          $ref: "#/definitions/ChainRequest"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HSMKey"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "ChainIO"
  /chain/transactions:
    post:
      tags:
      - "ChainIO"
      description: "Gets list of recent transactions."
      operationId: "getTransactions"
      parameters:
      - in: "body"
        name: "connection"
        description: "Connection data for Chain Node"
        required: false
        schema:
          $ref: "#/definitions/NodeConnection"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TransactionResponse"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "ChainIO"
  /chain/sign:
    post:
      tags:
      - "ChainIO"
      description: "sign this transaction partial"
      operationId: "signTransaction"
      parameters:
      - in: "body"
        name: "request"
        description: "Request includes Node connection details and transaction information\n"
        required: false
        schema:
          $ref: "#/definitions/ChainRequest"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TransactionResponse"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "ChainIO"
definitions:
  Trade:
    type: "object"
    properties:
      tradeId:
        type: "string"
        format: "int32"
        example: "d290f1ee"
      parentId:
        type: "string"
        format: "int32"
        example: "d290f1ee"
      tradeDescription:
        type: "string"
        example: "User A sold X asset to User B for Y Asset"
      seller:
        $ref: "#/definitions/TradeItem"
      buyer:
        $ref: "#/definitions/TradeItem"
      expiryDateTime:
        type: "string"
        format: "date"
        example: "2017-01-31T09:00:00.002Z"
      transactionHex:
        type: "string"
      status:
        type: "string"
        example: "Processed or Cancelled"
      lastActionDate:
        type: "string"
        format: "date"
        example: "2017-01-31T09:00:00.002Z"
  TradeItem:
    type: "object"
    properties:
      asset:
        $ref: "#/definitions/Asset"
      account:
        $ref: "#/definitions/Account"
      amount:
        type: "number"
        format: "integer"
        example: 100
  User:
    required:
    - "email"
    - "fullName"
    - "userName"
    properties:
      userName:
        type: "string"
      fullName:
        type: "string"
      email:
        type: "string"
        format: "email"
      telephone:
        type: "string"
        format: "phone"
      avatar:
        type: "string"
        format: "base64 image"
      password:
        type: "string"
        format: "hashed password"
  NodeConnection:
    required:
    - "clientToken"
    - "nodeURL"
    properties:
      nodeURL:
        type: "string"
        format: "URL"
        example: "http://172.16.101.93:1999"
      clientToken:
        type: "string"
        example: "UbuntuDev:e72629518809db4f5176d084f80f2261a3f4c70e044c6339251977c79f73c4bb"
    description: "Defines the remote node connection details"
  Asset:
    properties:
      id:
        type: "string"
        example: "227f376b170560cc3c3243e09de3560b2ba732a9522217b3d87d0992a19e5341"
        description: "Used when referencing this asset from a remote node"
      alias:
        type: "string"
        example: "BlockCoin"
        description: "Friendly unique name for the Asset. Only visible on local node"
      quorum:
        type: "number"
        description: "On Asset creation > 0, number of keys required to sign. Must\
          \ be <= keys.length"
      tags:
        type: "object"
        description: "The tag is an optional key-value field used for arbitrary storage\
          \ or queries. This data is local to the Chain Core and not visible in the\
          \ blockchain."
        properties: {}
      definition:
        type: "object"
        description: "The definition is global data about the asset that is visible\
          \ in the blockchain."
        properties: {}
      keys:
        type: "array"
        items:
          $ref: "#/definitions/HSMKey"
    description: "Model defining the core information of a Chain Asset"
  Account:
    properties:
      id:
        type: "string"
        example: "acc0RSDADNVG0804"
      alias:
        type: "string"
        example: "BobAccount1"
        description: "Friendly unique name for the Account. Only visible on local\
          \ node"
      quorum:
        type: "number"
        description: "On Account creation > 0, number of keys required to sign. Must\
          \ be <= keys.length"
      tags:
        type: "object"
        description: "The tag is an optional key-value field used for arbitrary storage\
          \ or queries. This data is local to the Chain Core and not visible in the\
          \ blockchain."
        properties: {}
      keys:
        type: "array"
        description: "When used, array length must >= 1"
        items:
          $ref: "#/definitions/HSMKey"
      controlProgram:
        type: "string"
        example: "766baa20f19b55122a0404313b57fbdab7b59548a311dcf2fcf538f1d7cc025ca625e52b5151ad696c00c0"
        description: "Used when paying to this account from a remote node."
    description: "Model defining the core information of a Chain Account"
  HSMKey:
    properties:
      alias:
        type: "string"
        description: "Freindly name for the key. Usually '{AccountAlias}Key'"
      rootXpub:
        type: "string"
        example: "4abb21e69072a7b17357cc514847f556afd6e007a7c92ef4f898208c1103212aef4d36e42441888cd25d5e7d61a13a2811777c0b2f25ce66abb898141abe8f4a"
      accountXpub:
        type: "string"
        example: "48764b4efe18bbf1c3ad9f60ab60a5eb6f6a8d72d560bdf07e261d4a707cd50244db49b4e64547a2686bc3eb282815bf1337cab4a3343ea1c95948b81e6f3df0"
      accountDerivationPath:
        type: "array"
        items:
          type: "string"
          example: "AQYAAAAAAAAA"
    description: "Model defining the properties of Chain HSM Key"
  Transaction:
    properties:
      spend:
        $ref: "#/definitions/TradeItem"
      control:
        $ref: "#/definitions/TradeItem"
      allowAdditionalActions:
        type: "string"
        example: "yes or no"
      baseTransaction:
        type: "string"
      referenceData:
        type: "object"
        properties: {}
    description: "Model defining the parameters of a Spend transaction."
  ChainRequest:
    required:
    - "connection"
    properties:
      connection:
        $ref: "#/definitions/NodeConnection"
      account:
        $ref: "#/definitions/Account"
      asset:
        $ref: "#/definitions/Asset"
      transaction:
        $ref: "#/definitions/Transaction"
      hsmkey:
        type: "array"
        items:
          $ref: "#/definitions/HSMKey"
    description: "Model used to search or create new objects on a Chain node"
  TransactionResponse:
    properties:
      id:
        type: "string"
        example: "af3c8f3e42f35072ab1286225e2b3cd73552b9ce3a3cf3cd936f6e3a9d3f40df"
      timestamp:
        type: "string"
        format: "date"
        example: "2017-02-09T14:20:24.000Z"
      block_id:
        type: "string"
      block_height:
        type: "integer"
      position:
        type: "integer"
      reference_data:
        type: "object"
        properties: {}
      is_local:
        type: "string"
        example: "no"
      inputs:
        type: "array"
        items:
          $ref: "#/definitions/TransactionInputSpend"
      outputs:
        type: "array"
        items:
          $ref: "#/definitions/TransactionOutputControl"
  TransactionInputIssue:
    properties:
      type:
        type: "string"
      asset_id:
        type: "string"
      asset_definition:
        type: "string"
      asset_tags:
        type: "string"
      asset_is_local:
        type: "string"
      amount:
        type: "integer"
      issuance_program:
        type: "string"
      reference_data:
        type: "object"
        properties: {}
      is_local:
        type: "string"
  TransactionInputSpend:
    properties:
      type:
        type: "string"
      asset_id:
        type: "string"
      asset_alias:
        type: "string"
      asset_definition:
        type: "object"
        properties: {}
      asset_tags:
        type: "object"
        properties: {}
      asset_is_local:
        type: "string"
        example: "yes"
      amount:
        type: "integer"
      spent_output:
        type: "object"
        properties: {}
      account_id:
        type: "string"
      account_alias:
        type: "string"
      account_tags:
        type: "object"
        properties: {}
      reference_data:
        type: "object"
        properties: {}
      is_local:
        type: "string"
        example: "yes"
  TransactionOutputControl:
    properties:
      type:
        type: "string"
      purpose:
        type: "string"
        example: "receive or change"
      position:
        type: "integer"
      asset_id:
        type: "string"
      asset_definition:
        type: "object"
        properties: {}
      asset_tags:
        type: "object"
        properties: {}
      asset_is_local:
        type: "string"
      amount:
        type: "integer"
      account_id:
        type: "string"
      account_alias:
        type: "string"
      account_tags:
        type: "object"
        properties: {}
      control_program:
        type: "string"
      reference_data:
        type: "object"
        properties: {}
      is_local:
        type: "string"
        example: "no"
  inline_response_200_meta:
    properties:
      code:
        type: "integer"
  inline_response_200:
    properties:
      meta:
        $ref: "#/definitions/inline_response_200_meta"
      data:
        type: "array"
        items:
          $ref: "#/definitions/Trade"
  inline_response_400_error:
    properties:
      message:
        type: "string"
  inline_response_400:
    properties:
      meta:
        $ref: "#/definitions/inline_response_200_meta"
      error:
        $ref: "#/definitions/inline_response_400_error"
  inline_response_200_1:
    properties:
      meta:
        $ref: "#/definitions/inline_response_200_meta"
      data:
        type: "array"
        items:
          $ref: "#/definitions/User"
